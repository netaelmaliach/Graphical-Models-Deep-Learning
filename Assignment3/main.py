import numpy as np


def beliefPropagation():
    f = {
    'i' : [0.7, 0.3],
    'd' : [0.6,0.4],
    's_i' : [[0.95, 0.05], [0.2, 0.8]],
    'l_g' : [[0.1, 0.9], [0.4, 0.6], [0.99, 0.01]],
    'g_i_d' : [[0.3, 0.4, 0.3], [0.05, 0.25, 0.7], [0.9, 0.08, 0.02, ], [0.5, 0.3, 0.2]]
    }
    # p(I)
    p_I = []

    m_S_f2 = 1
    m_L_f3 = 1
    m_D_f1 = 1
    # f2 -> I
    m_f2_I0 = (f['s_i'][0][0] + f['s_i'][0][1]) * m_S_f2
    m_f2_I1 = (f['s_i'][1][0] + f['s_i'][1][1]) * m_S_f2

    #f3 -> G
    m_f3_G1 = (f['l_g'][0][0] + f['l_g'][0][1]) * m_L_f3
    m_f3_G2 = (f['l_g'][1][0] + f['l_g'][1][1]) * m_L_f3
    m_f3_G3 = (f['l_g'][2][0] + f['l_g'][2][1]) * m_L_f3

    #G -> f1
    m_G1_f1 = m_f3_G1
    m_G2_f1 = m_f3_G2
    m_G3_f1 = m_f3_G3

    #f1 -> I p(i)p(d)p(g|i,d)
    m_f1_I0 = (f['i'][0] * f['d'][0] * f['g_i_d'][0][0] + \
               f['i'][0] * f['d'][1] * f['g_i_d'][1][0]) * m_G1_f1 * m_D_f1 + \
              (f['i'][0] * f['d'][0] * f['g_i_d'][0][1] + \
              f['i'][0] * f['d'][1] * f['g_i_d'][1][1]) * m_G2_f1 * m_D_f1  + \
                (f['i'][0] * f['d'][0] * f['g_i_d'][0][2] + \
               f['i'][0] * f['d'][1] * f['g_i_d'][1][2] ) * m_G3_f1 * m_D_f1

    m_f1_I1 = (f['i'][1] * f['d'][0] * f['g_i_d'][0][0] + \
               f['i'][1] * f['d'][1] * f['g_i_d'][1][0]) * m_G1_f1 * m_D_f1 + \
              (f['i'][1] * f['d'][0] * f['g_i_d'][0][1] + \
              f['i'][1] * f['d'][1] * f['g_i_d'][1][1]) * m_G2_f1 * m_D_f1  + \
                (f['i'][1] * f['d'][0] * f['g_i_d'][0][2] + \
               f['i'][1] * f['d'][1] * f['g_i_d'][1][2] ) * m_G3_f1 * m_D_f1

    p_I = [0,0]
    p_I[0] = m_f1_I0 * m_f2_I0
    p_I[1] = m_f1_I1 * m_f2_I1
    print("p(I): ", p_I)

    #p(D)
    #I -> f1
    m_I0_f1 = m_f2_I0
    m_I1_f1 = m_f2_I1

    #f1 -> D
    m_f1_D0 = (f['i'][0] * f['d'][0] * f['g_i_d'][0][0]) * m_I0_f1 * m_G1_f1 + \
              (f['i'][1] * f['d'][0] * f['g_i_d'][2][0]) * m_I1_f1 * m_G1_f1 + \
              (f['i'][0] * f['d'][0] * f['g_i_d'][0][1]) * m_I0_f1 * m_G2_f1 + \
              (f['i'][1] * f['d'][0] * f['g_i_d'][2][1]) * m_I1_f1 * m_G2_f1 + \
              (f['i'][0] * f['d'][0] * f['g_i_d'][0][2]) * m_I0_f1 * m_G3_f1 + \
              (f['i'][1] * f['d'][0] * f['g_i_d'][2][2]) * m_I1_f1 * m_G3_f1
    m_f1_D1 = (f['i'][0] * f['d'][1] * f['g_i_d'][1][0]) * m_I0_f1 * m_G1_f1 + \
              (f['i'][1] * f['d'][1] * f['g_i_d'][3][0]) * m_I1_f1 * m_G1_f1 + \
              (f['i'][0] * f['d'][1] * f['g_i_d'][1][1]) * m_I0_f1 * m_G2_f1 + \
              (f['i'][1] * f['d'][1] * f['g_i_d'][3][1]) * m_I1_f1 * m_G2_f1 + \
              (f['i'][0] * f['d'][1] * f['g_i_d'][1][2]) * m_I0_f1 * m_G3_f1 + \
              (f['i'][1] * f['d'][1] * f['g_i_d'][3][2]) * m_I1_f1 * m_G3_f1

    p_D = [m_f1_D0, m_f1_D1]
    print("p(D): ", p_D)

    #p(S)
    #I -> f2
    m_I0_f2 = m_f1_I0
    m_I1_f2 = m_f1_I1

    #f2 -> S
    m_f2_S0 = f['s_i'][0][0] * m_I0_f2 + f['s_i'][1][0] * m_I1_f2
    m_f2_S1 = f['s_i'][0][1] * m_I0_f2 + f['s_i'][1][1] * m_I1_f2

    p_S = [m_f2_S0, m_f2_S1]
    print("p(S): ", p_S)

    #p(G)
    #f1 -> G
    m_f1_G1 = (f['i'][0] * f['d'][0] * f['g_i_d'][0][0]) * m_I0_f1 * m_D_f1 + \
              (f['i'][1] * f['d'][0] * f['g_i_d'][2][0]) * m_I1_f1 * m_D_f1 + \
              (f['i'][0] * f['d'][1] * f['g_i_d'][1][0]) * m_I0_f1 * m_D_f1 + \
              (f['i'][1] * f['d'][1] * f['g_i_d'][3][0]) * m_I0_f1 * m_D_f1

    m_f1_G2 = (f['i'][0] * f['d'][0] * f['g_i_d'][0][1]) * m_I0_f1 * m_D_f1 + \
              (f['i'][1] * f['d'][0] * f['g_i_d'][2][1]) * m_I1_f1 * m_D_f1 + \
              (f['i'][0] * f['d'][1] * f['g_i_d'][1][1]) * m_I0_f1 * m_D_f1 + \
              (f['i'][1] * f['d'][1] * f['g_i_d'][3][1]) * m_I0_f1 * m_D_f1

    m_f1_G3 = (f['i'][0] * f['d'][0] * f['g_i_d'][0][2]) * m_I0_f1 * m_D_f1 + \
              (f['i'][1] * f['d'][0] * f['g_i_d'][2][2]) * m_I1_f1 * m_D_f1 + \
              (f['i'][0] * f['d'][1] * f['g_i_d'][1][2]) * m_I0_f1 * m_D_f1 + \
              (f['i'][1] * f['d'][1] * f['g_i_d'][3][2]) * m_I0_f1 * m_D_f1
    p_G = [0,0,0]
    p_G[0] = m_f1_G1 * m_f3_G1
    p_G[1] = m_f1_G2 * m_f3_G2
    p_G[2] = m_f1_G3 * m_f3_G3
    print("p(G): ", p_G)

    #p(L)
    #G -> f3
    m_G1_f3 = m_f1_G1
    m_G2_f3 = m_f1_G2
    m_G3_f3 = m_f1_G3

    #f3 -> L
    m_f3_L0 = f['l_g'][0][0] * m_G1_f3 + \
              f['l_g'][1][0] * m_G2_f3 + \
              f['l_g'][2][0] * m_G3_f3
    m_f3_L1 = f['l_g'][0][1] * m_G1_f3 + \
              f['l_g'][1][1] * m_G2_f3 + \
              f['l_g'][2][1] * m_G3_f3

    p_L = [m_f3_L0, m_f3_L1]
    print("p(L): ", p_L)




if __name__ == '__main__':
    beliefPropagation()